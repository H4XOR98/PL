%{
    #include<string.h>
    #include<glib.h>
    #include<time.h>
    typedef struct comment
    {
        GString* id;
        GString* user;
        GString* date;
        gint timestamp;
        GString* commentText;
        gboolean hasReplies;
        gint numberOfReplies;
        GArray* replies;
    }* Comment; 

    GArray* commentThread;
%}


%option noyywrap yylineno

%x TEXT

%{
    void insertCommentReply(Comment comment, gboolean isReply);
    gint dateToTimestamp(char* date);
%}

%%      
                                                Comment c; gboolean isReply = FALSE;

\<form                                          isReply = FALSE;

\-t\"\ id=\"[a-z0-9]{6}                         c = g_new(struct comment,1); insertCommentReply(c, isReply); c->hasReplies = FALSE; c->id = g_string_new(yytext+8);


rel=\"nofollow\">.*/\ \<\/a\>                   c->user = g_string_new(yytext+15);
\ +Conta.*                                     c->user = g_string_new(yytext+16);


permalink\">[0-9 .:]+                           c->date = g_string_new(yytext+11);
datetime=\"[0-9\-T:.]+/[\"\>]                   c->timestamp = dateToTimestamp(yytext+10);

\<p\>\r\n\ *                                    BEGIN TEXT; c->commentText = g_string_new("");
<TEXT>\n+\ *\<\/p\>                             BEGIN 0; isReply = TRUE;
<TEXT>.|\n                                      {}
<TEXT>.*/\r                                     g_string_append(c->commentText,yytext);


.|\n                                            {}

%%

void insertCommentReply(Comment comment, gboolean isReply){
    if(isReply == FALSE){
        comment->numberOfReplies = 0;
        g_array_append_val(commentThread,comment);
    } else {
        Comment c = g_array_index(commentThread,Comment,(commentThread->len)-1);
        if(c->hasReplies == FALSE){
            c->replies = g_array_new(FALSE,FALSE,sizeof(Comment));
        }
        g_array_append_val(c->replies,comment);
        c->hasReplies = TRUE;
        c->numberOfReplies++;
    }
}

gint dateToTimestamp(char* date){
    struct tm time;
    strptime(date, "%Y-%m-%dT%H:%M:%S", &time);
    time_t loctime = mktime(&time);
    gint millis = atoi(date+20);
    gint resultado = (gint)loctime + millis;
    return resultado;
}


void printReply(Comment comment){
    printf("\t\t{\n");
    printf("\t\t  \"id\": \"%s\",\n", comment->id->str);
    printf("\t\t  \"user\": \"%s\",\n",comment->user->str);
    printf("\t\t  \"date\": \"%s\",\n",comment->date->str);
    printf("\t\t  \"timestamp\": %d,\n", comment->timestamp);
    printf("\t\t  \"commentText\": \"%s\",\n", comment->commentText->str);
    //printf("\t\t  \"commentText\": \" \",\n");
    printf("\t\t  \"hasReplies\": ");
    if(comment->hasReplies == TRUE){
        printf("TRUE,\n");
    } else {
        printf("FALSE,\n");
    }
    printf("\t\t  \"numberOfReplies\": %d \n\n", comment->numberOfReplies);
    printf("\t\t  \"replies\": [ ]\n");
    printf("\t\t}");
}

void printComment(Comment comment){
    printf("\t{\n");
    printf("\t  \"id\": \"%s\",\n", comment->id->str);
    printf("\t  \"user\": \"%s\",\n",comment->user->str);
    printf("\t  \"date\": \"%s\",\n",comment->date->str);
    printf("\t  \"timestamp\": %d,\n", comment->timestamp);
    printf("\t  \"commentText\": \"%s\",\n", comment->commentText->str);
    printf("\t  \"hasReplies\": ");
    if(comment->hasReplies == TRUE){
        printf("TRUE,\n");
    } else {
        printf("FALSE,\n");
    }
    printf("\t  \"numberOfReplies\": %d \n\n", comment->numberOfReplies);
    printf("\t  \"replies\": ");
    if(comment->hasReplies == TRUE){
        Comment c;
        printf("[\n");
        for(int i = 0; i < comment->numberOfReplies ; i++){
            c = g_array_index(comment->replies,Comment,i);
            printReply(c);
            if(i != comment->numberOfReplies-1){
                printf(",\n");
            }
        }
        printf("\n\t]");
    }else{
        printf("[ ]\n");
    }
    printf("\n\t}");
}


void printCommentThread(){
    Comment c;
    printf("\"CommentThread:\" : [\n");
    for(gint i = 0 ; i < commentThread->len ; i++){
         c = g_array_index(commentThread,Comment,i);
         printComment(c);
         if(i != commentThread->len-1){
            printf(",\n");
         }
    } 
    printf("\n]");
}

int main(int argc, char* argv[]){
    if(argc == 2){yyin = fopen(argv[1],"r");}
    commentThread = g_array_new(FALSE,FALSE,sizeof(Comment));
    yylex();
    printCommentThread();
    return 0;
}